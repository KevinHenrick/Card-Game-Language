type token =
  | ASSIGN
  | PLUS
  | SUB
  | MULT
  | DIV
  | MOD
  | GEQ
  | LEQ
  | GT
  | LT
  | EQ
  | NEQ
  | TEQ
  | TNEQ
  | AND
  | OR
  | NOT
  | CONCAT
  | ADDR
  | ADDL
  | REMR
  | REML
  | DOT
  | SEMI
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | DOLLAR
  | LBRACK
  | RBRACK
  | INCLUDE
  | DEF
  | ELSE
  | ELE
  | FOREACH
  | IF
  | PLAYER
  | RETURN
  | SETUP
  | TURN
  | WHILE
  | WIN
  | YOUR
  | TYPE of (Ast.datatype)
  | INT of (int)
  | DOUBLE of (float)
  | BOOL of (bool)
  | STRING of (string)
  | CARD of (int * char)
  | SUIT of (char)
  | ID of (string)
  | EOF

open Parsing;;
# 2 "parser.mly"
(* Author: Mark Micchelli *)
open Ast
# 62 "parser.ml"
let yytransl_const = [|
  257 (* ASSIGN *);
  258 (* PLUS *);
  259 (* SUB *);
  260 (* MULT *);
  261 (* DIV *);
  262 (* MOD *);
  263 (* GEQ *);
  264 (* LEQ *);
  265 (* GT *);
  266 (* LT *);
  267 (* EQ *);
  268 (* NEQ *);
  269 (* TEQ *);
  270 (* TNEQ *);
  271 (* AND *);
  272 (* OR *);
  273 (* NOT *);
  274 (* CONCAT *);
  275 (* ADDR *);
  276 (* ADDL *);
  277 (* REMR *);
  278 (* REML *);
  279 (* DOT *);
  280 (* SEMI *);
  281 (* COMMA *);
  282 (* LPAREN *);
  283 (* RPAREN *);
  284 (* LBRACE *);
  285 (* RBRACE *);
  286 (* DOLLAR *);
  287 (* LBRACK *);
  288 (* RBRACK *);
  289 (* INCLUDE *);
  290 (* DEF *);
  291 (* ELSE *);
  292 (* ELE *);
  293 (* FOREACH *);
  294 (* IF *);
  295 (* PLAYER *);
  296 (* RETURN *);
  297 (* SETUP *);
  298 (* TURN *);
  299 (* WHILE *);
  300 (* WIN *);
  301 (* YOUR *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  302 (* TYPE *);
  303 (* INT *);
  304 (* DOUBLE *);
  305 (* BOOL *);
  306 (* STRING *);
  307 (* CARD *);
  308 (* SUIT *);
  309 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\005\000\
\005\000\006\000\007\000\007\000\008\000\008\000\009\000\010\000\
\004\000\004\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\013\000\013\000\014\000\014\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\000\000"

let yylen = "\002\000\
\001\000\000\000\002\000\004\000\005\000\006\000\005\000\000\000\
\002\000\009\000\000\000\001\000\001\000\003\000\002\000\005\000\
\000\000\002\000\002\000\003\000\001\000\003\000\005\000\007\000\
\005\000\005\000\000\000\001\000\001\000\003\000\001\000\001\000\
\001\000\001\000\001\000\003\000\003\000\005\000\001\000\001\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\002\000\002\000\
\004\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\067\000\000\000\000\000\000\000\000\000\000\000\
\003\000\017\000\008\000\000\000\008\000\000\000\000\000\008\000\
\000\000\000\000\000\000\000\000\000\000\017\000\004\000\000\000\
\000\000\040\000\000\000\000\000\000\000\000\000\041\000\000\000\
\031\000\032\000\033\000\034\000\035\000\000\000\021\000\000\000\
\018\000\000\000\000\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\064\000\000\000\019\000\000\000\005\000\000\000\007\000\000\000\
\066\000\022\000\036\000\037\000\000\000\000\000\000\000\020\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\006\000\000\000\000\000\000\000\000\000\000\000\000\000\065\000\
\000\000\000\000\025\000\000\000\026\000\016\000\000\000\000\000\
\000\000\013\000\000\000\015\000\000\000\000\000\024\000\017\000\
\014\000\000\000\010\000"

let yydgoto = "\002\000\
\003\000\004\000\009\000\014\000\015\000\044\000\136\000\137\000\
\138\000\039\000\040\000\041\000\054\000\055\000"

let yysindex = "\011\000\
\000\000\000\000\000\000\252\254\241\254\244\254\232\254\005\255\
\000\000\000\000\000\000\014\255\000\000\246\001\009\255\000\000\
\009\255\112\003\112\003\112\003\112\003\000\000\000\000\112\003\
\112\003\000\000\018\255\022\255\112\003\024\255\000\000\020\255\
\000\000\000\000\000\000\000\000\000\000\045\255\000\000\049\004\
\000\000\028\255\032\002\000\000\009\255\074\002\024\004\052\255\
\188\004\172\003\116\002\112\000\121\004\044\255\054\255\112\003\
\112\003\073\004\112\003\076\255\112\003\112\003\112\003\112\003\
\112\003\112\003\112\003\112\003\112\003\112\003\112\003\112\003\
\112\003\112\003\112\003\112\003\112\003\112\003\112\003\112\003\
\000\000\112\003\000\000\027\255\000\000\158\002\000\000\112\003\
\000\000\000\000\000\000\000\000\112\003\199\003\226\003\000\000\
\253\003\112\003\055\255\121\004\255\254\255\254\052\255\052\255\
\052\255\029\005\029\005\029\005\029\005\020\005\020\005\254\004\
\254\004\232\004\210\004\091\001\188\004\166\004\052\255\058\255\
\000\000\144\004\121\004\070\003\070\003\070\003\097\004\000\000\
\035\255\119\003\000\000\050\255\000\000\000\000\033\255\060\255\
\064\255\000\000\070\003\000\000\078\255\035\255\000\000\000\000\
\000\000\200\002\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\111\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\242\002\000\000\
\242\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\083\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\089\255\000\000\000\000\
\000\000\000\000\000\000\000\000\242\002\000\000\000\000\176\255\
\214\001\000\000\000\000\000\000\004\255\000\000\230\254\000\000\
\000\000\000\000\000\000\000\000\090\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\249\254\135\000\170\000\211\255\007\000\
\042\000\228\000\001\001\030\001\059\001\088\001\117\001\138\001\
\159\001\180\001\197\001\199\000\235\001\218\001\077\000\000\000\
\000\000\000\000\007\255\000\000\000\000\000\000\000\000\000\000\
\091\255\141\255\000\000\028\003\000\000\000\000\000\000\000\000\
\092\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\241\255\008\000\000\000\000\000\000\000\
\236\255\000\000\246\255\158\255\062\000\000\000"

let yytablesize = 1588
let yytable = "\043\000\
\028\000\046\000\065\000\066\000\067\000\028\000\051\000\047\000\
\048\000\049\000\050\000\001\000\010\000\052\000\053\000\011\000\
\042\000\042\000\058\000\042\000\017\000\082\000\012\000\045\000\
\042\000\131\000\132\000\133\000\029\000\086\000\029\000\030\000\
\013\000\030\000\005\000\029\000\006\000\007\000\030\000\008\000\
\143\000\016\000\042\000\056\000\042\000\094\000\095\000\057\000\
\097\000\059\000\053\000\100\000\101\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\115\000\116\000\117\000\118\000\061\000\119\000\
\060\000\084\000\082\000\092\000\098\000\122\000\093\000\120\000\
\135\000\128\000\123\000\129\000\139\000\140\000\141\000\127\000\
\142\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\144\000\039\000\039\000\039\000\039\000\001\000\039\000\
\039\000\039\000\027\000\039\000\027\000\011\000\012\000\108\000\
\039\000\145\000\099\000\000\000\000\000\000\000\000\000\000\000\
\146\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\039\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\000\000\038\000\038\000\
\038\000\038\000\000\000\038\000\038\000\038\000\000\000\038\000\
\000\000\000\000\000\000\000\000\038\000\000\000\000\000\000\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\038\000\062\000\062\000\062\000\062\000\000\000\000\000\062\000\
\062\000\000\000\062\000\000\000\000\000\000\000\000\000\062\000\
\000\000\000\000\000\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\062\000\045\000\045\000\045\000\045\000\
\000\000\000\000\045\000\045\000\000\000\045\000\000\000\000\000\
\000\000\000\000\045\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\045\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\000\000\
\046\000\046\000\046\000\046\000\000\000\000\000\046\000\046\000\
\000\000\046\000\000\000\000\000\000\000\000\000\046\000\000\000\
\000\000\000\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\046\000\047\000\047\000\047\000\047\000\000\000\
\000\000\047\000\047\000\000\000\047\000\000\000\000\000\000\000\
\000\000\047\000\000\000\000\000\000\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\047\000\061\000\061\000\
\061\000\061\000\000\000\000\000\061\000\061\000\000\000\061\000\
\000\000\000\000\000\000\000\000\061\000\000\000\000\000\000\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\061\000\078\000\079\000\080\000\081\000\000\000\082\000\043\000\
\043\000\043\000\000\000\000\000\000\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\000\000\
\043\000\043\000\043\000\043\000\000\000\000\000\043\000\043\000\
\000\000\043\000\000\000\091\000\000\000\000\000\043\000\000\000\
\000\000\000\000\044\000\044\000\044\000\000\000\000\000\000\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\043\000\044\000\044\000\044\000\044\000\000\000\
\000\000\044\000\044\000\000\000\044\000\000\000\000\000\058\000\
\000\000\044\000\000\000\000\000\000\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\000\000\
\058\000\058\000\058\000\058\000\000\000\044\000\058\000\058\000\
\000\000\058\000\000\000\000\000\055\000\000\000\058\000\000\000\
\000\000\000\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\000\000\000\000\055\000\055\000\
\055\000\000\000\058\000\055\000\055\000\000\000\055\000\000\000\
\000\000\053\000\000\000\055\000\000\000\000\000\000\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\000\000\000\000\053\000\053\000\053\000\000\000\055\000\
\053\000\053\000\000\000\053\000\000\000\000\000\054\000\000\000\
\053\000\000\000\000\000\000\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\000\000\000\000\
\054\000\054\000\054\000\000\000\053\000\054\000\054\000\000\000\
\054\000\000\000\000\000\052\000\000\000\054\000\000\000\000\000\
\000\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\000\000\000\000\052\000\052\000\052\000\
\000\000\054\000\052\000\052\000\000\000\052\000\000\000\000\000\
\048\000\000\000\052\000\000\000\063\000\064\000\065\000\066\000\
\067\000\000\000\048\000\048\000\048\000\048\000\048\000\048\000\
\000\000\000\000\048\000\048\000\048\000\000\000\052\000\048\000\
\048\000\082\000\048\000\000\000\000\000\049\000\000\000\048\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
\049\000\049\000\049\000\049\000\049\000\000\000\000\000\049\000\
\049\000\049\000\050\000\048\000\049\000\049\000\000\000\049\000\
\000\000\000\000\000\000\000\000\049\000\000\000\050\000\050\000\
\050\000\050\000\000\000\000\000\050\000\050\000\050\000\051\000\
\000\000\050\000\050\000\000\000\050\000\000\000\000\000\000\000\
\049\000\050\000\000\000\051\000\051\000\051\000\051\000\000\000\
\000\000\051\000\051\000\051\000\056\000\000\000\051\000\051\000\
\000\000\051\000\000\000\000\000\000\000\050\000\051\000\000\000\
\000\000\000\000\056\000\056\000\000\000\057\000\056\000\056\000\
\056\000\000\000\000\000\056\000\056\000\000\000\056\000\000\000\
\000\000\000\000\051\000\056\000\057\000\000\000\063\000\057\000\
\057\000\057\000\059\000\000\000\057\000\057\000\000\000\057\000\
\000\000\000\000\000\000\000\000\057\000\000\000\000\000\056\000\
\063\000\063\000\000\000\060\000\000\000\063\000\063\000\000\000\
\063\000\059\000\059\000\000\000\059\000\063\000\000\000\000\000\
\057\000\059\000\000\000\000\000\000\000\060\000\060\000\018\000\
\000\000\000\000\060\000\060\000\000\000\060\000\019\000\000\000\
\000\000\063\000\060\000\020\000\000\000\059\000\000\000\021\000\
\000\000\022\000\023\000\024\000\025\000\000\000\000\000\000\000\
\000\000\026\000\027\000\028\000\000\000\029\000\060\000\000\000\
\030\000\000\000\031\000\032\000\033\000\034\000\035\000\036\000\
\037\000\018\000\038\000\000\000\000\000\000\000\000\000\000\000\
\019\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\
\000\000\021\000\000\000\022\000\085\000\024\000\025\000\000\000\
\000\000\000\000\000\000\026\000\027\000\028\000\000\000\029\000\
\000\000\000\000\030\000\000\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\018\000\038\000\000\000\000\000\000\000\
\000\000\000\000\019\000\000\000\000\000\000\000\000\000\020\000\
\000\000\000\000\000\000\021\000\000\000\022\000\087\000\024\000\
\025\000\000\000\000\000\000\000\000\000\026\000\027\000\028\000\
\000\000\029\000\000\000\000\000\030\000\000\000\031\000\032\000\
\033\000\034\000\035\000\036\000\037\000\018\000\038\000\000\000\
\000\000\000\000\000\000\000\000\019\000\000\000\000\000\000\000\
\000\000\020\000\000\000\000\000\000\000\021\000\000\000\022\000\
\090\000\024\000\025\000\000\000\000\000\000\000\000\000\026\000\
\027\000\028\000\000\000\029\000\000\000\000\000\030\000\000\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\018\000\
\038\000\000\000\000\000\000\000\000\000\000\000\019\000\000\000\
\000\000\000\000\000\000\020\000\000\000\000\000\000\000\021\000\
\000\000\022\000\121\000\024\000\025\000\000\000\000\000\000\000\
\000\000\026\000\027\000\028\000\000\000\029\000\000\000\000\000\
\030\000\000\000\031\000\032\000\033\000\034\000\035\000\036\000\
\037\000\018\000\038\000\000\000\000\000\000\000\000\000\000\000\
\019\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\
\000\000\021\000\000\000\022\000\147\000\024\000\025\000\000\000\
\000\000\000\000\000\000\026\000\027\000\028\000\000\000\029\000\
\000\000\000\000\030\000\000\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\017\000\038\000\000\000\000\000\000\000\
\000\000\000\000\017\000\000\000\000\000\000\000\000\000\017\000\
\000\000\000\000\000\000\017\000\000\000\017\000\017\000\017\000\
\017\000\000\000\000\000\000\000\000\000\017\000\017\000\017\000\
\000\000\017\000\000\000\000\000\017\000\000\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\023\000\017\000\000\000\
\000\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\
\000\000\023\000\000\000\000\000\000\000\023\000\000\000\023\000\
\023\000\023\000\023\000\000\000\000\000\000\000\000\000\023\000\
\023\000\023\000\000\000\023\000\000\000\000\000\023\000\000\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\018\000\
\023\000\000\000\000\000\000\000\000\000\000\000\019\000\000\000\
\000\000\000\000\000\000\020\000\000\000\000\000\000\000\021\000\
\000\000\022\000\000\000\024\000\025\000\000\000\000\000\000\000\
\000\000\026\000\027\000\028\000\000\000\029\000\000\000\000\000\
\030\000\000\000\031\000\032\000\033\000\034\000\035\000\036\000\
\037\000\018\000\038\000\000\000\000\000\000\000\000\000\000\000\
\019\000\000\000\000\000\000\000\000\000\020\000\000\000\019\000\
\000\000\021\000\000\000\000\000\020\000\024\000\025\000\000\000\
\021\000\000\000\000\000\026\000\024\000\025\000\000\000\000\000\
\000\000\000\000\026\000\000\000\031\000\000\000\033\000\034\000\
\035\000\036\000\037\000\031\000\038\000\033\000\034\000\035\000\
\036\000\037\000\000\000\038\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\000\000\078\000\079\000\080\000\
\081\000\000\000\082\000\000\000\000\000\000\000\089\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\000\000\
\078\000\079\000\080\000\081\000\000\000\082\000\000\000\000\000\
\000\000\124\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\000\000\078\000\079\000\080\000\081\000\000\000\
\082\000\000\000\000\000\000\000\125\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\000\000\078\000\079\000\
\080\000\081\000\000\000\082\000\000\000\000\000\000\000\126\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\000\000\078\000\079\000\080\000\081\000\000\000\082\000\000\000\
\088\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\000\000\078\000\079\000\080\000\081\000\000\000\082\000\
\083\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\000\000\078\000\079\000\080\000\081\000\000\000\082\000\
\096\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\000\000\078\000\079\000\080\000\081\000\000\000\082\000\
\134\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\000\000\078\000\079\000\080\000\081\000\000\000\082\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\130\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\000\000\078\000\079\000\080\000\081\000\000\000\082\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\000\000\078\000\
\079\000\080\000\081\000\000\000\082\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\000\000\078\000\000\000\000\000\
\081\000\000\000\082\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\000\000\000\000\078\000\000\000\000\000\000\000\000\000\
\082\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\000\000\000\000\
\000\000\078\000\000\000\000\000\000\000\000\000\082\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\000\000\000\000\000\000\000\000\000\000\078\000\
\000\000\000\000\000\000\000\000\082\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\063\000\064\000\
\065\000\066\000\067\000\000\000\000\000\078\000\000\000\000\000\
\000\000\000\000\082\000\000\000\000\000\000\000\078\000\000\000\
\000\000\000\000\000\000\082\000"

let yycheck = "\015\000\
\027\001\017\000\004\001\005\001\006\001\032\001\022\000\018\000\
\019\000\020\000\021\000\001\000\028\001\024\000\025\000\028\001\
\024\001\025\001\029\000\027\001\013\000\023\001\047\001\016\000\
\032\001\124\000\125\000\126\000\025\001\045\000\027\001\025\001\
\028\001\027\001\039\001\032\001\041\001\042\001\032\001\044\001\
\139\000\028\001\034\001\026\001\052\001\056\000\057\000\026\001\
\059\000\026\001\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\026\001\082\000\
\053\001\046\001\023\001\032\001\001\001\088\000\025\001\053\001\
\046\001\027\001\093\000\026\001\035\001\053\001\027\001\098\000\
\025\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\028\001\018\001\019\001\020\001\021\001\000\000\023\001\
\024\001\025\001\032\001\027\001\027\001\027\001\027\001\130\000\
\032\001\142\000\061\000\255\255\255\255\255\255\255\255\255\255\
\144\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\052\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\255\255\018\001\019\001\
\020\001\021\001\255\255\023\001\024\001\025\001\255\255\027\001\
\255\255\255\255\255\255\255\255\032\001\255\255\255\255\255\255\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\052\001\018\001\019\001\020\001\021\001\255\255\255\255\024\001\
\025\001\255\255\027\001\255\255\255\255\255\255\255\255\032\001\
\255\255\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\052\001\018\001\019\001\020\001\021\001\
\255\255\255\255\024\001\025\001\255\255\027\001\255\255\255\255\
\255\255\255\255\032\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\052\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\018\001\019\001\020\001\021\001\255\255\255\255\024\001\025\001\
\255\255\027\001\255\255\255\255\255\255\255\255\032\001\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\052\001\018\001\019\001\020\001\021\001\255\255\
\255\255\024\001\025\001\255\255\027\001\255\255\255\255\255\255\
\255\255\032\001\255\255\255\255\255\255\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\052\001\018\001\019\001\
\020\001\021\001\255\255\255\255\024\001\025\001\255\255\027\001\
\255\255\255\255\255\255\255\255\032\001\255\255\255\255\255\255\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\052\001\018\001\019\001\020\001\021\001\255\255\023\001\001\001\
\002\001\003\001\255\255\255\255\255\255\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\018\001\019\001\020\001\021\001\255\255\255\255\024\001\025\001\
\255\255\027\001\255\255\052\001\255\255\255\255\032\001\255\255\
\255\255\255\255\001\001\002\001\003\001\255\255\255\255\255\255\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\052\001\018\001\019\001\020\001\021\001\255\255\
\255\255\024\001\025\001\255\255\027\001\255\255\255\255\001\001\
\255\255\032\001\255\255\255\255\255\255\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\018\001\019\001\020\001\021\001\255\255\052\001\024\001\025\001\
\255\255\027\001\255\255\255\255\001\001\255\255\032\001\255\255\
\255\255\255\255\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\255\255\255\255\019\001\020\001\
\021\001\255\255\052\001\024\001\025\001\255\255\027\001\255\255\
\255\255\001\001\255\255\032\001\255\255\255\255\255\255\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\255\255\019\001\020\001\021\001\255\255\052\001\
\024\001\025\001\255\255\027\001\255\255\255\255\001\001\255\255\
\032\001\255\255\255\255\255\255\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\255\255\052\001\024\001\025\001\255\255\
\027\001\255\255\255\255\001\001\255\255\032\001\255\255\255\255\
\255\255\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\255\255\019\001\020\001\021\001\
\255\255\052\001\024\001\025\001\255\255\027\001\255\255\255\255\
\001\001\255\255\032\001\255\255\002\001\003\001\004\001\005\001\
\006\001\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\255\255\019\001\020\001\021\001\255\255\052\001\024\001\
\025\001\023\001\027\001\255\255\255\255\001\001\255\255\032\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\011\001\
\012\001\013\001\014\001\015\001\016\001\255\255\255\255\019\001\
\020\001\021\001\001\001\052\001\024\001\025\001\255\255\027\001\
\255\255\255\255\255\255\255\255\032\001\255\255\013\001\014\001\
\015\001\016\001\255\255\255\255\019\001\020\001\021\001\001\001\
\255\255\024\001\025\001\255\255\027\001\255\255\255\255\255\255\
\052\001\032\001\255\255\013\001\014\001\015\001\016\001\255\255\
\255\255\019\001\020\001\021\001\001\001\255\255\024\001\025\001\
\255\255\027\001\255\255\255\255\255\255\052\001\032\001\255\255\
\255\255\255\255\015\001\016\001\255\255\001\001\019\001\020\001\
\021\001\255\255\255\255\024\001\025\001\255\255\027\001\255\255\
\255\255\255\255\052\001\032\001\016\001\255\255\001\001\019\001\
\020\001\021\001\001\001\255\255\024\001\025\001\255\255\027\001\
\255\255\255\255\255\255\255\255\032\001\255\255\255\255\052\001\
\019\001\020\001\255\255\001\001\255\255\024\001\025\001\255\255\
\027\001\024\001\025\001\255\255\027\001\032\001\255\255\255\255\
\052\001\032\001\255\255\255\255\255\255\019\001\020\001\010\001\
\255\255\255\255\024\001\025\001\255\255\027\001\017\001\255\255\
\255\255\052\001\032\001\022\001\255\255\052\001\255\255\026\001\
\255\255\028\001\029\001\030\001\031\001\255\255\255\255\255\255\
\255\255\036\001\037\001\038\001\255\255\040\001\052\001\255\255\
\043\001\255\255\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\010\001\053\001\255\255\255\255\255\255\255\255\255\255\
\017\001\255\255\255\255\255\255\255\255\022\001\255\255\255\255\
\255\255\026\001\255\255\028\001\029\001\030\001\031\001\255\255\
\255\255\255\255\255\255\036\001\037\001\038\001\255\255\040\001\
\255\255\255\255\043\001\255\255\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\010\001\053\001\255\255\255\255\255\255\
\255\255\255\255\017\001\255\255\255\255\255\255\255\255\022\001\
\255\255\255\255\255\255\026\001\255\255\028\001\029\001\030\001\
\031\001\255\255\255\255\255\255\255\255\036\001\037\001\038\001\
\255\255\040\001\255\255\255\255\043\001\255\255\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\010\001\053\001\255\255\
\255\255\255\255\255\255\255\255\017\001\255\255\255\255\255\255\
\255\255\022\001\255\255\255\255\255\255\026\001\255\255\028\001\
\029\001\030\001\031\001\255\255\255\255\255\255\255\255\036\001\
\037\001\038\001\255\255\040\001\255\255\255\255\043\001\255\255\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\010\001\
\053\001\255\255\255\255\255\255\255\255\255\255\017\001\255\255\
\255\255\255\255\255\255\022\001\255\255\255\255\255\255\026\001\
\255\255\028\001\029\001\030\001\031\001\255\255\255\255\255\255\
\255\255\036\001\037\001\038\001\255\255\040\001\255\255\255\255\
\043\001\255\255\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\010\001\053\001\255\255\255\255\255\255\255\255\255\255\
\017\001\255\255\255\255\255\255\255\255\022\001\255\255\255\255\
\255\255\026\001\255\255\028\001\029\001\030\001\031\001\255\255\
\255\255\255\255\255\255\036\001\037\001\038\001\255\255\040\001\
\255\255\255\255\043\001\255\255\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\010\001\053\001\255\255\255\255\255\255\
\255\255\255\255\017\001\255\255\255\255\255\255\255\255\022\001\
\255\255\255\255\255\255\026\001\255\255\028\001\029\001\030\001\
\031\001\255\255\255\255\255\255\255\255\036\001\037\001\038\001\
\255\255\040\001\255\255\255\255\043\001\255\255\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\010\001\053\001\255\255\
\255\255\255\255\255\255\255\255\017\001\255\255\255\255\255\255\
\255\255\022\001\255\255\255\255\255\255\026\001\255\255\028\001\
\029\001\030\001\031\001\255\255\255\255\255\255\255\255\036\001\
\037\001\038\001\255\255\040\001\255\255\255\255\043\001\255\255\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\010\001\
\053\001\255\255\255\255\255\255\255\255\255\255\017\001\255\255\
\255\255\255\255\255\255\022\001\255\255\255\255\255\255\026\001\
\255\255\028\001\255\255\030\001\031\001\255\255\255\255\255\255\
\255\255\036\001\037\001\038\001\255\255\040\001\255\255\255\255\
\043\001\255\255\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\010\001\053\001\255\255\255\255\255\255\255\255\255\255\
\017\001\255\255\255\255\255\255\255\255\022\001\255\255\017\001\
\255\255\026\001\255\255\255\255\022\001\030\001\031\001\255\255\
\026\001\255\255\255\255\036\001\030\001\031\001\255\255\255\255\
\255\255\255\255\036\001\255\255\045\001\255\255\047\001\048\001\
\049\001\050\001\051\001\045\001\053\001\047\001\048\001\049\001\
\050\001\051\001\255\255\053\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\255\255\018\001\019\001\020\001\
\021\001\255\255\023\001\255\255\255\255\255\255\027\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\018\001\019\001\020\001\021\001\255\255\023\001\255\255\255\255\
\255\255\027\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\255\255\018\001\019\001\020\001\021\001\255\255\
\023\001\255\255\255\255\255\255\027\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\255\255\018\001\019\001\
\020\001\021\001\255\255\023\001\255\255\255\255\255\255\027\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\018\001\019\001\020\001\021\001\255\255\023\001\255\255\
\025\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\018\001\019\001\020\001\021\001\255\255\023\001\
\024\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\018\001\019\001\020\001\021\001\255\255\023\001\
\024\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\018\001\019\001\020\001\021\001\255\255\023\001\
\024\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\018\001\019\001\020\001\021\001\255\255\023\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\018\001\019\001\020\001\021\001\255\255\023\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\019\001\020\001\021\001\255\255\023\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\255\255\018\001\255\255\255\255\
\021\001\255\255\023\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\255\255\255\255\018\001\255\255\255\255\255\255\255\255\
\023\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\255\255\
\255\255\018\001\255\255\255\255\255\255\255\255\023\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\255\255\255\255\018\001\
\255\255\255\255\255\255\255\255\023\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\002\001\003\001\
\004\001\005\001\006\001\255\255\255\255\018\001\255\255\255\255\
\255\255\255\255\023\001\255\255\255\255\255\255\018\001\255\255\
\255\255\255\255\255\255\023\001"

let yynames_const = "\
  ASSIGN\000\
  PLUS\000\
  SUB\000\
  MULT\000\
  DIV\000\
  MOD\000\
  GEQ\000\
  LEQ\000\
  GT\000\
  LT\000\
  EQ\000\
  NEQ\000\
  TEQ\000\
  TNEQ\000\
  AND\000\
  OR\000\
  NOT\000\
  CONCAT\000\
  ADDR\000\
  ADDL\000\
  REMR\000\
  REML\000\
  DOT\000\
  SEMI\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  DOLLAR\000\
  LBRACK\000\
  RBRACK\000\
  INCLUDE\000\
  DEF\000\
  ELSE\000\
  ELE\000\
  FOREACH\000\
  IF\000\
  PLAYER\000\
  RETURN\000\
  SETUP\000\
  TURN\000\
  WHILE\000\
  WIN\000\
  YOUR\000\
  EOF\000\
  "

let yynames_block = "\
  TYPE\000\
  INT\000\
  DOUBLE\000\
  BOOL\000\
  STRING\000\
  CARD\000\
  SUIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bdecl_list) in
    Obj.repr(
# 52 "parser.mly"
               ( List.rev _1 )
# 686 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
                    ( [] )
# 692 "parser.ml"
               : 'bdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'bdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'bdecl) in
    Obj.repr(
# 56 "parser.mly"
                       (_2 :: _1 )
# 700 "parser.ml"
               : 'bdecl_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 60 "parser.mly"
        ( { bname = "PLAYER"; bid = -1;
        funcs = []; bbody = List.rev _3; } )
# 708 "parser.ml"
               : 'bdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fdecl_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 63 "parser.mly"
        ( { bname = "SETUP"; bid = -1; funcs = List.rev _3;
        bbody = List.rev _4; } )
# 717 "parser.ml"
               : 'bdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'fdecl_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 66 "parser.mly"
        ( { bname = "TURN"; bid = _2; funcs = List.rev _4;
        bbody = List.rev _5; } )
# 727 "parser.ml"
               : 'bdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fdecl_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 69 "parser.mly"
        ( { bname = "WIN"; bid = -1; funcs = List.rev _3;
        bbody = List.rev _4; } )
# 736 "parser.ml"
               : 'bdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                       ( [] )
# 742 "parser.ml"
               : 'fdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 74 "parser.mly"
                       ( _2 :: _1 )
# 750 "parser.ml"
               : 'fdecl_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Ast.datatype) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'formal_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 78 "parser.mly"
    ( { fdt = _2;
	    fname = _3;
	    formals = _5;
	    fbody = List.rev _8; }
    )
# 764 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
                    ( [] )
# 770 "parser.ml"
               : 'formal_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 86 "parser.mly"
                  ( List.rev _1 )
# 777 "parser.ml"
               : 'formal_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 89 "parser.mly"
             ( [_1] )
# 784 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 90 "parser.mly"
                               ( (_3 :: _1) )
# 792 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.datatype) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 93 "parser.mly"
            ( { pdt = _1; pname = _2; } )
# 800 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Ast.datatype) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
    ( { vdt = _1;
        vname = _2;
        value = _4; }
    )
# 812 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
                     ( [] )
# 818 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 104 "parser.mly"
                     ( _2 :: _1 )
# 826 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                ( Expr(_1) )
# 833 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                       ( Return(_2) )
# 840 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 109 "parser.mly"
            ( Vdecl(_1) )
# 847 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 110 "parser.mly"
                              ( Block(List.rev _2) )
# 854 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 111 "parser.mly"
                                              ( If(_3, _5, Block([])) )
# 862 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 112 "parser.mly"
                                              ( If(_3, _5, _7) )
# 871 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 113 "parser.mly"
                                      ( Foreach(_3, _5) )
# 879 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 114 "parser.mly"
                                    ( While(_3, _5) )
# 887 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "parser.mly"
                    ( [] )
# 893 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 118 "parser.mly"
                ( List.rev _1 )
# 900 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
           ( [_1] )
# 907 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                           ( _3 :: _1 )
# 915 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 125 "parser.mly"
                     ( Int(_1) )
# 922 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 126 "parser.mly"
                       ( Double(_1) )
# 929 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 127 "parser.mly"
                       ( Bool(_1) )
# 936 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 128 "parser.mly"
                       ( String(_1) )
# 943 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int * char) in
    Obj.repr(
# 129 "parser.mly"
                       ( Card(fst _1, snd _1) )
# 950 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 130 "parser.mly"
                       ( CardExpr(_2, _3) )
# 958 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 131 "parser.mly"
                             ( List(_2) )
# 965 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                             ( Player(_2, _4) )
# 973 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 133 "parser.mly"
                       ( Id(_1) )
# 980 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 134 "parser.mly"
                       ( Ele )
# 986 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser.mly"
                       ( Your )
# 992 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                       ( Binop(_1, Assign, _3) )
# 1000 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                       ( Binop(_1, Plus,   _3) )
# 1008 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                       ( Binop(_1, Sub,    _3) )
# 1016 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                       ( Binop(_1, Mult,   _3) )
# 1024 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                       ( Binop(_1, Div,    _3) )
# 1032 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                       ( Binop(_1, Mod,    _3) )
# 1040 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parser.mly"
                       ( Binop(_1, Eq,     _3) )
# 1048 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 143 "parser.mly"
                       ( Binop(_1, Neq,    _3) )
# 1056 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
                       ( Binop(_1, Teq,    _3) )
# 1064 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
                       ( Binop(_1, Tneq,   _3) )
# 1072 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
                       ( Binop(_1, Lt,     _3) )
# 1080 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 147 "parser.mly"
                       ( Binop(_1, Leq,    _3) )
# 1088 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 148 "parser.mly"
                       ( Binop(_1, Gt,     _3) )
# 1096 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 149 "parser.mly"
                       ( Binop(_1, Geq,    _3) )
# 1104 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 150 "parser.mly"
                       ( Binop(_1, And,    _3) )
# 1112 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 151 "parser.mly"
                       ( Binop(_1, Or,     _3) )
# 1120 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 152 "parser.mly"
                       ( Binop(_1, Concat, _3) )
# 1128 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 153 "parser.mly"
                       ( Binop(_1, Addl,   _3) )
# 1136 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 154 "parser.mly"
                       ( Binop(_1, Addr,   _3) )
# 1144 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 155 "parser.mly"
                       ( Binop(_1, Dot,    _3) )
# 1152 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 156 "parser.mly"
                       ( Unopl(Not,  _2) )
# 1159 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 157 "parser.mly"
                       ( Unopl(Reml, _2) )
# 1166 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 158 "parser.mly"
                       ( Unopr(_1, Remr) )
# 1173 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 159 "parser.mly"
                                ( Call(_1, _3) )
# 1181 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 160 "parser.mly"
                         ( _2 )
# 1188 "parser.ml"
               : 'expr))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
